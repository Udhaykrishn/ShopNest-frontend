/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const SignupLazyImport = createFileRoute('/signup')()
const ShopLazyImport = createFileRoute('/shop')()
const LoginLazyImport = createFileRoute('/login')()
const VendorIndexLazyImport = createFileRoute('/vendor/')()
const VendorSignupLazyImport = createFileRoute('/vendor/signup')()
const VendorLoginLazyImport = createFileRoute('/vendor/login')()
const VendorProductsIndexLazyImport = createFileRoute('/vendor/products/')()

// Create/Update Routes

const SignupLazyRoute = SignupLazyImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))

const ShopLazyRoute = ShopLazyImport.update({
  id: '/shop',
  path: '/shop',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/shop.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VendorIndexLazyRoute = VendorIndexLazyImport.update({
  id: '/vendor/',
  path: '/vendor/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/vendor/index.lazy').then((d) => d.Route))

const VendorSignupLazyRoute = VendorSignupLazyImport.update({
  id: '/vendor/signup',
  path: '/vendor/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/vendor/signup.lazy').then((d) => d.Route))

const VendorLoginLazyRoute = VendorLoginLazyImport.update({
  id: '/vendor/login',
  path: '/vendor/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/vendor/login.lazy').then((d) => d.Route))

const VendorProductsIndexLazyRoute = VendorProductsIndexLazyImport.update({
  id: '/vendor/products/',
  path: '/vendor/products/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/vendor/products/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/shop': {
      id: '/shop'
      path: '/shop'
      fullPath: '/shop'
      preLoaderRoute: typeof ShopLazyImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupLazyImport
      parentRoute: typeof rootRoute
    }
    '/vendor/login': {
      id: '/vendor/login'
      path: '/vendor/login'
      fullPath: '/vendor/login'
      preLoaderRoute: typeof VendorLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/vendor/signup': {
      id: '/vendor/signup'
      path: '/vendor/signup'
      fullPath: '/vendor/signup'
      preLoaderRoute: typeof VendorSignupLazyImport
      parentRoute: typeof rootRoute
    }
    '/vendor/': {
      id: '/vendor/'
      path: '/vendor'
      fullPath: '/vendor'
      preLoaderRoute: typeof VendorIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/vendor/products/': {
      id: '/vendor/products/'
      path: '/vendor/products'
      fullPath: '/vendor/products'
      preLoaderRoute: typeof VendorProductsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/shop': typeof ShopLazyRoute
  '/signup': typeof SignupLazyRoute
  '/vendor/login': typeof VendorLoginLazyRoute
  '/vendor/signup': typeof VendorSignupLazyRoute
  '/vendor': typeof VendorIndexLazyRoute
  '/vendor/products': typeof VendorProductsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/shop': typeof ShopLazyRoute
  '/signup': typeof SignupLazyRoute
  '/vendor/login': typeof VendorLoginLazyRoute
  '/vendor/signup': typeof VendorSignupLazyRoute
  '/vendor': typeof VendorIndexLazyRoute
  '/vendor/products': typeof VendorProductsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/shop': typeof ShopLazyRoute
  '/signup': typeof SignupLazyRoute
  '/vendor/login': typeof VendorLoginLazyRoute
  '/vendor/signup': typeof VendorSignupLazyRoute
  '/vendor/': typeof VendorIndexLazyRoute
  '/vendor/products/': typeof VendorProductsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/shop'
    | '/signup'
    | '/vendor/login'
    | '/vendor/signup'
    | '/vendor'
    | '/vendor/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/shop'
    | '/signup'
    | '/vendor/login'
    | '/vendor/signup'
    | '/vendor'
    | '/vendor/products'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/shop'
    | '/signup'
    | '/vendor/login'
    | '/vendor/signup'
    | '/vendor/'
    | '/vendor/products/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginLazyRoute: typeof LoginLazyRoute
  ShopLazyRoute: typeof ShopLazyRoute
  SignupLazyRoute: typeof SignupLazyRoute
  VendorLoginLazyRoute: typeof VendorLoginLazyRoute
  VendorSignupLazyRoute: typeof VendorSignupLazyRoute
  VendorIndexLazyRoute: typeof VendorIndexLazyRoute
  VendorProductsIndexLazyRoute: typeof VendorProductsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginLazyRoute: LoginLazyRoute,
  ShopLazyRoute: ShopLazyRoute,
  SignupLazyRoute: SignupLazyRoute,
  VendorLoginLazyRoute: VendorLoginLazyRoute,
  VendorSignupLazyRoute: VendorSignupLazyRoute,
  VendorIndexLazyRoute: VendorIndexLazyRoute,
  VendorProductsIndexLazyRoute: VendorProductsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/shop",
        "/signup",
        "/vendor/login",
        "/vendor/signup",
        "/vendor/",
        "/vendor/products/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/shop": {
      "filePath": "shop.lazy.tsx"
    },
    "/signup": {
      "filePath": "signup.lazy.tsx"
    },
    "/vendor/login": {
      "filePath": "vendor/login.lazy.tsx"
    },
    "/vendor/signup": {
      "filePath": "vendor/signup.lazy.tsx"
    },
    "/vendor/": {
      "filePath": "vendor/index.lazy.tsx"
    },
    "/vendor/products/": {
      "filePath": "vendor/products/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
